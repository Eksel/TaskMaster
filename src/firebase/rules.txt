// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Personal Tasks
    match /tasks/{taskId} {
      allow read: if request.auth != null && resource.data.createdBy == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid;
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Shopping Items Collection
    match /shopping_items/{itemId} {
      function isTaskOwner() {
        return get(/databases/$(database)/documents/tasks/$(resource.data.taskId)).data.createdBy == request.auth.uid;
      }

      function isChannelTaskMember() {
        let taskPath = resource.data.channelId != null ? 
          /databases/$(database)/documents/channels/$(resource.data.channelId)/tasks/$(resource.data.taskId) :
          /databases/$(database)/documents/tasks/$(resource.data.taskId);
        let task = get(taskPath);
        return task.data.createdBy == request.auth.uid || 
          (resource.data.channelId != null && 
            get(/databases/$(database)/documents/channels/$(resource.data.channelId)).data.members.hasAny([request.auth.uid]));
      }

      allow read: if request.auth != null && (isTaskOwner() || isChannelTaskMember());
      allow create: if request.auth != null && 
        (request.resource.data.channelId == null ? isTaskOwner() : isChannelTaskMember());
      allow update: if request.auth != null && 
        (resource.data.channelId == null ? isTaskOwner() : isChannelTaskMember()) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['completed']);
      allow delete: if request.auth != null && 
        (resource.data.channelId == null ? isTaskOwner() : isChannelTaskMember());
    }
    
    // Channels
    match /channels/{channelId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        resource.data.admins.hasAny([request.auth.uid]) ||
        (
          (!resource.data.isPublic && resource.data.inviteCode == request.resource.data.inviteCode) ||
          (resource.data.isPublic == true || resource.data.members.hasAny([request.auth.uid])) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members'])
        )
      );
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
      
      // Channel Messages
      match /messages/{messageId} {
        allow read: if true;
        allow create: if request.auth != null && (
          get(/databases/$(database)/documents/channels/$(channelId)).data.members.hasAny([request.auth.uid]) ||
          get(/databases/$(database)/documents/channels/$(channelId)).data.admins.hasAny([request.auth.uid]) ||
          get(/databases/$(database)/documents/channels/$(channelId)).data.createdBy == request.auth.uid
        ) && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid;
      }
      
      // Channel Tasks
      match /tasks/{taskId} {
        function getChannel() {
          return get(/databases/$(database)/documents/channels/$(channelId));
        }
        
        function isChannelMember() {
          return getChannel().data.members.hasAny([request.auth.uid]);
        }
        
        function isChannelAdmin() {
          return getChannel().data.admins.hasAny([request.auth.uid]);
        }
        
        function isChannelCreator() {
          return getChannel().data.createdBy == request.auth.uid;
        }
        
        function isTaskCreator() {
          return resource.data.createdBy == request.auth.uid;
        }
        
        allow read: if true;
        allow create: if request.auth != null && (isChannelMember() || isChannelAdmin() || isChannelCreator()) 
          && request.resource.data.createdBy == request.auth.uid;
        allow update: if request.auth != null && (isTaskCreator() || isChannelAdmin() || isChannelCreator());
        allow delete: if request.auth != null && (isTaskCreator() || isChannelAdmin() || isChannelCreator());
      }
    }
    
    // Direct Messages
    match /directMessages/{messageId} {
      allow read: if true;
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.senderId
      );
      allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid;
    }
  }
}

// Storage Rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /users/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}